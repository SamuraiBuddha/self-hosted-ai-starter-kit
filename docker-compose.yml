networks:
  demo:
    driver: bridge
   
volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  open-webui:
  flowise:
  text-generation-webui:
  localai_models:
  localai_images:
  vllm_cache:
  neo4j_data:
  neo4j_logs:
  # New volumes for monitoring
  grafana_storage:
  loki_storage:
  tempo_storage:
  mimir_storage:
  influxdb_storage:
  prometheus_storage:
  
x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=postgres
    - DB_POSTGRESDB_PASSWORD=password123
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY=Thatsapp!esn0ranges
    - N8N_USER_MANAGEMENT_JWT_SECRET=Rump!e&Hobbes
  links:
    - postgres

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['demo']
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['demo']
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull llama3.2; OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text"

services:
  flowise:
    image: flowiseai/flowise
    networks: ['demo']
    restart: unless-stopped
    container_name: flowise
    environment:
        - PORT=3001
    ports:
        - 3001:3001
    extra_hosts:
      - "host.docker.internal:host-gateway"        
    volumes:
        - flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    networks: ['demo']
    restart: unless-stopped
    container_name: open-webui
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data

  postgres:
    image: postgres:16-alpine
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      POSTGRES_DB: n8n
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U postgres -d n8n']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-community
    container_name: neo4j
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 7474:7474  # HTTP
      - 7687:7687  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    environment:
      - NEO4J_AUTH=neo4j/password123
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]

  # ====================
  # MONITORING STACK
  # ====================

  # Grafana - Main visualization platform (using port 3030 to avoid conflict with Open WebUI)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "3030:3000"  # External:Internal - Access Grafana at http://localhost:3030
    environment:
      - GF_INSTALL_PLUGINS=redis-app,grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      - GF_SERVER_ROOT_URL=http://localhost:3030
      - GF_SECURITY_ADMIN_PASSWORD=admin123  # Change this!
    volumes:
      - grafana_storage:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
      - influxdb

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_storage:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Loki - Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_storage:/loki
    command: -config.file=/etc/loki/local-config.yaml

  # Promtail - Log collector for Loki
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    networks: ['demo']
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

  # Tempo - Distributed tracing
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "3200:3200"
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
    volumes:
      - tempo_storage:/tmp/tempo
    command: [ "-config.file=/etc/tempo.yaml" ]

  # Mimir - Long-term metrics storage
  mimir:
    image: grafana/mimir:latest
    container_name: mimir
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "9009:9009"
    volumes:
      - mimir_storage:/data
    command: [ "-config.file=/etc/mimir.yaml" ]

  # InfluxDB - Time-series database for IoT/sensor data
  influxdb:
    image: influxdb:2
    container_name: influxdb
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=password123
      - DOCKER_INFLUXDB_INIT_ORG=bim-org
      - DOCKER_INFLUXDB_INIT_BUCKET=bim-metrics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=super-secret-auth-token
    volumes:
      - influxdb_storage:/var/lib/influxdb2

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true

  # GPU Monitoring (NVIDIA) - Only runs with GPU profile
  dcgm-exporter:
    profiles: ["gpu-nvidia"]
    image: nvidia/dcgm-exporter:latest
    container_name: dcgm-exporter
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "9400:9400"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # ====================
  # AI/LLM SERVICES
  # ====================

  # Text Generation WebUI - GPU version
  text-generation-webui:
    profiles: ["gpu-nvidia"]
    image: atinoda/text-generation-webui:default-nvidia
    container_name: text-generation-webui
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 7860:7860
      - 5000:5000  # API port
      - 5005:5005  # Streaming API port
    volumes:
      - text-generation-webui:/app/text-generation-webui
      - ./models:/app/text-generation-webui/models
      - ./loras:/app/text-generation-webui/loras
      - ./characters:/app/text-generation-webui/characters
    environment:
      - CLI_ARGS=--listen --api --extensions openai
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # LocalAI - GPU version
  localai:
    profiles: ["gpu-nvidia"]
    image: localai/localai:latest-aio-gpu-nvidia-cuda-12
    container_name: localai
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 8081:8080  # Changed from 8080 to avoid conflict with cAdvisor
    volumes:
      - localai_models:/build/models
      - localai_images:/tmp/generated/images
    environment:
      - THREADS=8
      - CONTEXT_SIZE=4096
      - DEBUG=false
      - GALLERIES=[{"name":"model-gallery","url":"github:go-skynet/model-gallery/index.yaml"}]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # vLLM - GPU version
  vllm:
    profiles: ["gpu-nvidia"]
    image: vllm/vllm-openai:latest
    container_name: vllm
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 8000:8000
    volumes:
      - ~/.cache/huggingface:/root/.cache/huggingface
      - vllm_cache:/root/.cache/vllm
    environment:
      - HUGGING_FACE_HUB_TOKEN=${HUGGING_FACE_HUB_TOKEN:-}
    # Note: You'll need to specify a model when starting
    # Example command override:
    # command: --model mistralai/Mistral-7B-Instruct-v0.2 --gpu-memory-utilization 0.95
    entrypoint: python -m vllm.entrypoints.openai.api_server
    command: --host 0.0.0.0 --model facebook/opt-125m  # Default small model, change this
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    shm_size: '16gb'  # Important for vLLM performance

  # CPU versions (optional)
  text-generation-webui-cpu:
    profiles: ["cpu"]
    image: atinoda/text-generation-webui:default
    container_name: text-generation-webui-cpu
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 7860:7860
      - 5000:5000
      - 5005:5005
    volumes:
      - text-generation-webui:/app/text-generation-webui
      - ./models:/app/text-generation-webui/models
    environment:
      - CLI_ARGS=--listen --api --cpu

  localai-cpu:
    profiles: ["cpu"]
    image: localai/localai:latest-aio-cpu
    container_name: localai-cpu
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 8081:8080  # Changed from 8080 to avoid conflict with cAdvisor
    volumes:
      - localai_models:/build/models
      - localai_images:/tmp/generated/images
    environment:
      - THREADS=8
      - CONTEXT_SIZE=4096

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu